-- ReplicatedStorage.InteractionData
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local InteractRemote = ReplicatedStorage:WaitForChild("InteractRemote")
local InteractValidate = ReplicatedStorage:WaitForChild("InteractValidate")
-- Define empty tables to allow circular references
local SeatInitialActions = {}
local DoorInitialActions = {}
local CodeEntryInitialActions = {}
local MachineInitialActions = {}
local EspressoMachineActions = {}

-- Seat Actions
SeatInitialActions = {
	{
		key = Enum.KeyCode.E,
		label = "Sit Down",
		callback = function(player, part)
			InteractRemote:FireServer(part, "Sit Down")
		end,
	},
}

-- Door Actions
DoorInitialActions = {
	{
		key = Enum.KeyCode.E,
		label = "Open Door",
		callback = function(player, part)
			InteractRemote:FireServer(part, "Open Door")
		end,
	},
}

-- Code Entry Actions
CodeEntryInitialActions = {
	{
		key = Enum.KeyCode.E,
		label = "Enter Code",
		callback = function(player, part)
			InteractRemote:FireServer(part, "EnterCode")
		end,
		onActivate = function(player, part)
			return {
				processingText = "Entering Code...",
				hideObjectText = true,
				hideRows = true,
				processingDuration = 2,
				postProcessState = {
					actionText = "Interact with",
					objectText = "Keypad",
					actions = CodeEntryInitialActions,
				},
			}
		end,
	},
}

-- Espresso Machine Actions (with validation)
MachineInitialActions = {
	{
		key = Enum.KeyCode.E,
		label = "Add",
		callback = function(player, part)
			InteractRemote:FireServer(part, "Add")
		end,
		onActivate = function(player, part)
			-- Validate with server BEFORE showing processing state
			local success, errorMessage = InteractValidate:InvokeServer(part, "Add")
			if not success then
				-- Show error message (you could create an error UI function)
				warn("Cannot add: " .. (errorMessage or "Unknown error"))
				return nil -- Don't change state
			end
			-- If validation passed, show processing state
			return {
				processingText = "Espresso Machine",
				hideObjectText = true,
				hideRows = true,
				processingDuration = 5.6,
				postProcessState = {
					actionText = "Espresso Machine",
					objectText = "",
					actions = {
						{
							key = Enum.KeyCode.E,
							label = "Collect",
							callback = function(player, part)
								InteractRemote:FireServer(part, "Collect")
							end,
							onActivate = function(player, part)
								-- Validate collection
								local success, errorMessage = InteractValidate:InvokeServer(part, "Collect")
								if not success then
									warn("Cannot collect: " .. (errorMessage or "Unknown error"))
									return nil
								end
								return {
									processingText = "Espresso Machine",
									hideObjectText = false,
									hideRows = false,
									processingDuration = 0,
									postProcessState = {
										actionText = "Espresso Machine",
										objectText = "This will result in espresso",
										actions = MachineInitialActions,
									},
								}
							end,
						},
					},
				},
			}
		end,
	},
}

-- Simple Espresso Machine Actions (no onActivate)
EspressoMachineActions = {
	{
		key = Enum.KeyCode.E,
		label = "Use Machine",
		callback = function(player, part)
			InteractRemote:FireServer(part, "UseMachine")
		end,
	},
	{
		key = Enum.KeyCode.F,
		label = "Refill Water",
		callback = function(player, part)
			InteractRemote:FireServer(part, "RefillWater")
		end,
	},
	{
		key = Enum.KeyCode.R,
		label = "Empty Grounds",
		callback = function(player, part)
			InteractRemote:FireServer(part, "EmptyGrounds")
		end,
	},
}

local InteractionData = {
	Seat = {
		actionText = "Interact with",
		objectText = "Seat",
		actions = SeatInitialActions,
	},
	Door = {
		actionText = "Interact with",
		objectText = "Door",
		actions = DoorInitialActions,
	},
	CodeEntry = {
		actionText = "Interact with",
		objectText = "Keypad",
		actions = CodeEntryInitialActions,
	},
	Machine = {
		actionText = "Espresso Machine",
		objectText = "This will result in espresso",
		actions = MachineInitialActions,
	},
	test = {
		actionText = "Espresso Machine",
		objectText = "Interact with",
		actions = EspressoMachineActions,
	},
}

return InteractionData
